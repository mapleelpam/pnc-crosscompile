#!/usr/bin/env python

import sys
import os
import errno

def program_name():
    return os.path.basename(sys.argv[0])

def print_usage_exit():
    sys.stderr.write('%s DEST_DIR\n' % (program_name(),))
    sys.exit(2)

def make_dirs(p):
    try:
        os.makedirs(p)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise

def print_mkdir_message_exit(dest_dir, error_msg):
    sys.stderr.write('Failed to write to "%(dest_dir)s": "%(error_msg)s"\n'
                     '1. Setup "sudo", see: http://psas.pdx.edu/SudoSetup/\n'
                     '2. Run:\n'
                     'sudo sh -c "mkdir -p %(dest_dir)s && chown -R %(euid)s %(dest_dir)s"\n\n' %
                     dict(dest_dir=dest_dir, error_msg=error_msg, euid=os.geteuid()))
    sys.exit(1)

def dir_exists_and_writable(dest_dir):
    '-> (dir_exists_and_writable, error_message)'
    if not os.path.isdir(dest_dir):
        return (False, 'not a directory')

    try:
        dest_path = os.path.join(dest_dir, 'f')
        f = open(dest_path, 'w')
    except (OSError, IOError), e:
        return (False, os.strerror(e.errno))
    else:
        f.close()
        os.unlink(dest_path)
        return (True, '')

def main(args):
    if ('--help' in args) or  ('-h' in args):
        print_usage_exit()
    try:
        (dest_dir,) = args
    except ValueError:
        print_usage_exit()

    (t, msg) = dir_exists_and_writable(dest_dir)
    if t:
        sys.exit(0)
    else:
        print_mkdir_message_exit(dest_dir, msg)


if __name__ == '__main__':
    main(sys.argv[1:])
